{"version":3,"sources":["components/FeedBack/FeedBack.js","App.js","index.js"],"names":["FeedBack","good","neutral","bad","total","positivePercentage","onGood","onNeutural","onBad","onClick","App","state","props","handelIncrementGood","setState","prevState","countTotalFeedback","handelIncrementNeutural","handelIncrementBad","countPositiveFeedbackPercentage","positiveFeedback","Math","round","this","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAgCeA,EA9BE,SAAC,GASX,IARLC,EAQI,EARJA,KACAC,EAOI,EAPJA,QACAC,EAMI,EANJA,IACAC,EAKI,EALJA,MACAC,EAII,EAJJA,mBACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,WACAC,EACI,EADJA,MAEA,OACE,oCACE,oDACA,6BACE,4BAAQC,QAAS,kBAAMH,MAAvB,QACA,4BAAQG,QAAS,kBAAMF,MAAvB,YACA,4BAAQE,QAAS,kBAAMD,MAAvB,QAEF,0CACA,4BACE,qCAAWP,GACX,yCAAeC,GACf,oCAAUC,GACV,sCAAYC,GACZ,kDAAwBC,EAAxB,QCpBFK,E,4MAOJC,MAAQ,CACNV,KAAM,EAAKW,MAAMX,KACjBC,QAAS,EAAKU,MAAMV,QACpBC,IAAK,EAAKS,MAAMT,K,EAGlBU,oBAAsB,WACpB,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5Bd,KAAMc,EAAUd,KAAO,MAEzB,EAAKe,sB,EAGPC,wBAA0B,WACxB,EAAKH,UAAS,SAACC,GAAD,MAAgB,CAC5Bb,QAASa,EAAUb,QAAU,MAE/B,EAAKc,sB,EAGPE,mBAAqB,WACnB,EAAKJ,UAAS,SAACC,GAAD,MAAgB,CAC5BZ,IAAKY,EAAUZ,IAAM,MAEvB,EAAKa,sB,EAGPA,mBAAqB,WAEnB,OADY,EAAKL,MAAMT,QAAU,EAAKS,MAAMR,IAAM,EAAKQ,MAAMV,M,EAI/DkB,gCAAkC,WAChC,IAAMC,EAAmB,EAAKT,MAAMV,KAC9BG,EAAQ,EAAKY,qBACnB,OAAII,EACKC,KAAKC,MAAOF,EAAmBhB,EAAS,KAG5CgB,OAAL,EACS,G,uDAID,IAAD,EACwBG,KAAKZ,MAA5BV,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,kBAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,KAAKP,qBACZX,mBAAoBkB,KAAKJ,kCACzBb,OAAQiB,KAAKV,oBACbN,WAAYgB,KAAKN,wBACjBT,MAAOe,KAAKL,yB,GA9DFM,aAAZd,EACGe,aAAe,CACpBxB,KAAM,EACNC,QAAS,EACTC,IAAK,GAgEMO,Q,MCrEfgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.46d389bc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst FeedBack = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n  onGood,\r\n  onNeutural,\r\n  onBad,\r\n}) => {\r\n  return (\r\n    <>\r\n      <h1>Please live feedback</h1>\r\n      <div>\r\n        <button onClick={() => onGood()}>Good</button>\r\n        <button onClick={() => onNeutural()}>Neutural</button>\r\n        <button onClick={() => onBad()}>Bad</button>\r\n      </div>\r\n      <h2>Statistics</h2>\r\n      <ul>\r\n        <li>Good: {good}</li>\r\n        <li>Neutural: {neutral}</li>\r\n        <li>Bad: {bad}</li>\r\n        <li>Total: {total}</li>\r\n        <li>Positive feedback: {positivePercentage}%</li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FeedBack;\r\n","// Base\nimport React, { Component } from \"react\";\n\n// Components\nimport FeedBack from \"./components/FeedBack\";\n\nclass App extends Component {\n  static defaultProps = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  state = {\n    good: this.props.good,\n    neutral: this.props.neutral,\n    bad: this.props.bad,\n  };\n\n  handelIncrementGood = () => {\n    this.setState((prevState) => ({\n      good: prevState.good + 1,\n    }));\n    this.countTotalFeedback();\n  };\n\n  handelIncrementNeutural = () => {\n    this.setState((prevState) => ({\n      neutral: prevState.neutral + 1,\n    }));\n    this.countTotalFeedback();\n  };\n\n  handelIncrementBad = () => {\n    this.setState((prevState) => ({\n      bad: prevState.bad + 1,\n    }));\n    this.countTotalFeedback();\n  };\n\n  countTotalFeedback = () => {\n    let total = this.state.neutral + this.state.bad + this.state.good;\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const positiveFeedback = this.state.good;\n    const total = this.countTotalFeedback();\n    if (positiveFeedback) {\n      return Math.round((positiveFeedback / total) * 100);\n    }\n\n    if (!positiveFeedback) {\n      return 0;\n    }\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <FeedBack\n        good={good}\n        neutral={neutral}\n        bad={bad}\n        total={this.countTotalFeedback()}\n        positivePercentage={this.countPositiveFeedbackPercentage()}\n        onGood={this.handelIncrementGood}\n        onNeutural={this.handelIncrementNeutural}\n        onBad={this.handelIncrementBad}\n      />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}